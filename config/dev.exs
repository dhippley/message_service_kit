import Config

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Configure your database
config :messaging_service, MessagingService.Repo,
  username: "messaging_user",
  password: "messaging_password",
  hostname: "localhost",
  database: "messaging_service_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :messaging_service, MessagingServiceWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "HQWgTKaYprpivGihBO09+JWMYWcXubWYq4QuEHOiKP1RkDQrPp9fwqn+1vY1GBxw",
  # ## SSL Support
  #
  # In order to use HTTPS in development, a self-signed
  # certificate can be generated by running the following
  # Mix task:
  #
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:messaging_service, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:messaging_service, ~w(--watch)]}
  ]

# Watch static and templates for browser reloading.
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
config :messaging_service, MessagingServiceWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/messaging_service_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Set environment
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
config :messaging_service, :env, :dev

# Configure the environment for provider manager
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

config :messaging_service, :environment, :dev

# Configure messaging providers
config :messaging_service, :provider_configs,
  twilio: %{
    provider: :twilio,
    config: %{
      account_sid: System.get_env("TWILIO_ACCOUNT_SID", "AC_test_sid"),
      auth_token: System.get_env("TWILIO_AUTH_TOKEN", "test_token_123456789012345678901234"),
      from_number: System.get_env("TWILIO_FROM_NUMBER", "+15551234567")
    },
    enabled: false
  },
  sendgrid: %{
    provider: :sendgrid,
    config: %{
      api_key: System.get_env("SENDGRID_API_KEY", "SG.test_key"),
      from_email: System.get_env("SENDGRID_FROM_EMAIL", "test@example.com"),
      from_name: System.get_env("SENDGRID_FROM_NAME", "Test Service")
    },
    enabled: false
  }

# Configure webhook authentication for development
config :messaging_service, :webhook_auth,
  bearer_tokens: [
    "dev-bearer-token-123",
    "webhook-test-token-456"
  ],
  api_keys: [
    "dev-api-key-123",
    "webhook-dev-key-456"
  ],
  basic_auth: [
    {"webhook_user", "dev_password_123"},
    {"dev_webhook", "secret_dev_key"}
  ]

# Enable dev routes for dashboard and mailbox
config :messaging_service, dev_routes: true

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false
